{"ast":null,"code":"var _jsxFileName = \"/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/QAList/QAList.tsx\";\nimport * as React from \"react\";\nimport \"./QAList.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass QAList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.processFormSubmission = async e => {\n      e.preventDefault(); // updateQA(id, question, answer);\n\n      this.setState({\n        loading: true\n      });\n      const formData = {\n        id: this.state.id,\n        question: this.state.question,\n        answer: this.state.answer\n      };\n      this.setState({\n        submitSuccess: true,\n        values: [...this.state.values, formData],\n        loading: false\n      });\n      axios.get(`http://localhost:9000/app/allQA`).then(data => [setTimeout(() => {\n        this.props.history.push('/');\n      }, 1500)]);\n    };\n\n    this.setValues = values => {\n      this.setState({\n        values: { ...this.state.values,\n          ...values\n        }\n      });\n    };\n\n    this.handleInputChanges = e => {\n      e.preventDefault();\n      this.setValues({\n        [e.currentTarget.id]: e.currentTarget.value\n      });\n    };\n\n    this.state = {\n      id: \"\",\n      question: {},\n      answer: {},\n      values: [],\n      loading: false,\n      submitSuccess: false\n    };\n  }\n\n  componentDidMount() {\n    //getALLQA();\n    axios.get(`http://localhost:9000/app/allQA`).then(response => {\n      console.log({\n        response\n      });\n      this.setValues(response.data);\n    });\n  }\n\n  render() {\n    const {\n      submitSuccess,\n      loading\n    } = this.state;\n    return (\n      /*#__PURE__*/\n      //   <div className=\"App\">\n      //     {this.state.question && (\n      //   {/* <div> {response.data && ( */}\n      // <h1> List of QA</h1>\n      // // {/* <div>\n      //   <div className={\"col-md-12 form-wrapper\"}>\n      //     <h2> Edit QA </h2>\n      //     {submitSuccess && (\n      //       <div className=\"alert alert-info\" role=\"alert\">\n      //         QA details has been edited successfully{\" \"}\n      //       </div> */}\n      //     {/* )} */}\n      // <form\n      //   id={\"create-post-form\"}\n      //   onSubmit={this.processFormSubmission}\n      //   noValidate={true}\n      // >\n      //   {/* <div className=\"form-group col-md-12\">\n      //     <label htmlFor=\"question\"> Questions </label>\n      //     <input\n      //     //   type=\"text\"\n      //     //   id=\"question\"\n      //     //   defaultValue={this.state.question.id}\n      //     // defaultValue={QAList}\n      //       onChange={(e) => this.handleInputChanges(e)}\n      //       name=\"question\"\n      //       className=\"form-control\"\n      //     />\n      //   </div> */}\n      //   {/* <div className=\"form-group col-md-12\">\n      //     <label htmlFor=\"answer\"> Answers </label>\n      //     <input\n      //       type=\"text\"\n      //       id=\"answer\"\n      //       defaultValue={this.state.answer.id}\n      //       onChange={(e) => this.handleInputChanges(e)}\n      //       name=\"answer\"\n      //       className=\"form-control\"\n      //     />\n      //   </div> */}\n      _jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"table table-bordered\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              className: \"thead-light\",\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  scope: \"col\",\n                  children: \"Question\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  scope: \"col\",\n                  children: \"Answer\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          type: \"submit\",\n          children: [\"Edit QA\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 8\n      }, this) //   </div>\n\n    );\n  }\n\n}\n\n{\n  /* <div className=\"form-group col-md-4 pull-right\">\n   <button className=\"btn\" type=\"submit\">\n     Edit QA{\" \"}\n   </button>\n   {loading && (\n     <span className=\"fa fa-circle-o-notch fa-spin\" />\n   )}\n  </div>\n  </form>\n  </div>\n  // </div>\n  //   </div>\n  )}\n  </div>\n  );\n  }\n  } */\n}\nexport default QAList;\n\nfunction id(id, question, answer) {\n  throw new Error(\"Function not implemented.\");\n}\n\nfunction question(id, question, answer) {\n  throw new Error(\"Function not implemented.\");\n}\n\nfunction answer(id, question, answer) {\n  throw new Error(\"Function not implemented.\");\n}","map":{"version":3,"sources":["/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/QAList/QAList.tsx"],"names":["React","axios","QAList","Component","constructor","props","processFormSubmission","e","preventDefault","setState","loading","formData","id","state","question","answer","submitSuccess","values","get","then","data","setTimeout","history","push","setValues","handleInputChanges","currentTarget","value","componentDidMount","response","console","log","render","Error"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport \"./QAList.css\";\nimport axios from \"axios\";\nimport { getQAById, updateQA } from \"../../lib/axios\";\nimport { getALLQA } from \"../../lib/axios\";\nimport { responseInterceptor } from \"http-proxy-middleware\";\nimport { Link } from \"react-router-dom\";\nimport { deleteQA } from \"../../lib/endpoints\";\nimport { table } from \"console\";\n\nexport interface IValues {\n  [key: string]: any;\n}\nexport interface IFormState {\n  id: string;\n  question: any;\n  answer: any;\n  values: IValues[];\n  submitSuccess: boolean;\n  loading: boolean;\n}\n\nclass QAList extends React.Component<any, any, IFormState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      id: \"\",\n      question: {},\n      answer: {},\n      values: [],\n      loading: false,\n      submitSuccess: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    //getALLQA();\n    axios.get(`http://localhost:9000/app/allQA`).then((response) => {\n        console.log({response})\n      this.setValues(response.data);\n    });\n  }\n\n  private processFormSubmission = async (\n    e: React.FormEvent<HTMLFormElement>\n  ): Promise<void> => {\n    e.preventDefault();\n\n    // updateQA(id, question, answer);\n    this.setState({ loading: true });\n    \n          const formData = {\n              id: this.state.id,\n              question: this.state.question,\n              answer: this.state.answer,\n              \n          }\n          this.setState({ submitSuccess: true, values: [...this.state.values, formData], loading: false });\n          axios.get(`http://localhost:9000/app/allQA`).then(data => [\n              setTimeout(() => {\n                  this.props.history.push('/');\n              }, 1500)\n          ]);\n      }\n//     axios.get(`http://localhost:9000/app/allQA`).then((response) => {\n//         this.setState({ submitSuccess: true, loading: false })\n//         setTimeout(() => {\n//             this.props.history.push('/');\n//         }, 1500)\n//     })\n//   };\n\n  private setValues = (values: IValues) => {\n    this.setState({ values: { ...this.state.values, ...values } });\n  };\n  private handleInputChanges = (e: React.FormEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    this.setValues({ [e.currentTarget.id]: e.currentTarget.value });\n  };\n\n  public render() {\n    const { submitSuccess, loading } = this.state;\n    return (\n    //   <div className=\"App\">\n    //     {this.state.question && (\n\n        //   {/* <div> {response.data && ( */}\n            // <h1> List of QA</h1>\n\n            // // {/* <div>\n            //   <div className={\"col-md-12 form-wrapper\"}>\n            //     <h2> Edit QA </h2>\n            //     {submitSuccess && (\n            //       <div className=\"alert alert-info\" role=\"alert\">\n            //         QA details has been edited successfully{\" \"}\n            //       </div> */}\n            //     {/* )} */}\n                // <form\n                //   id={\"create-post-form\"}\n                //   onSubmit={this.processFormSubmission}\n                //   noValidate={true}\n                // >\n                //   {/* <div className=\"form-group col-md-12\">\n                //     <label htmlFor=\"question\"> Questions </label>\n                //     <input\n                //     //   type=\"text\"\n                //     //   id=\"question\"\n                //     //   defaultValue={this.state.question.id}\n                //     // defaultValue={QAList}\n                //       onChange={(e) => this.handleInputChanges(e)}\n                //       name=\"question\"\n                //       className=\"form-control\"\n                     \n                //     />\n                //   </div> */}\n                //   {/* <div className=\"form-group col-md-12\">\n                //     <label htmlFor=\"answer\"> Answers </label>\n                //     <input\n                //       type=\"text\"\n                //       id=\"answer\"\n                //       defaultValue={this.state.answer.id}\n                //       onChange={(e) => this.handleInputChanges(e)}\n                //       name=\"answer\"\n                //       className=\"form-control\"\n                     \n                //     />\n                //   </div> */}\n\n       <div className=\"container\"> \n          <div className=\"row\">\n            <table className=\"table table-bordered\">\n              <thead className=\"thead-light\">\n                <tr>\n                  <th scope=\"col\">Question</th>\n                  <th scope=\"col\">Answer</th>\n                </tr>\n              </thead>\n              <tbody>\n                {/* {QAList &&\n                  QAList.map((response.data.question) => (\n                    <tr key={question}>\n                      <td>{question}</td>\n\n                     \n                    </tr> */}\n\n                    \n                  \n              </tbody>\n\n              \n            </table>\n          </div>\n          <button className=\"btn\" type=\"submit\">\n                      Edit QA{\" \"}\n                     </button>\n\n        </div>\n    //   </div>\n    );\n  }\n}\n\n\n                  {/* <div className=\"form-group col-md-4 pull-right\">\n                    <button className=\"btn\" type=\"submit\">\n                      Edit QA{\" \"}\n                    </button>\n                    {loading && (\n                      <span className=\"fa fa-circle-o-notch fa-spin\" />\n                    )}\n                  </div>\n                </form>\n              </div>\n            // </div>\n        //   </div>\n        )}\n      </div>\n    );\n  }\n} */}\n\nexport default QAList;\nfunction id(id: any, question: any, answer: any) {\n  throw new Error(\"Function not implemented.\");\n}\n\nfunction question(\n  id: (id: any, question: any, answer: any) => void,\n  question: any,\n  answer: any\n) {\n  throw new Error(\"Function not implemented.\");\n}\n\nfunction answer(\n  id: (id: any, question: any, answer: any) => void,\n  question: (\n    id: (id: any, question: any, answer: any) => void,\n    question: any,\n    answer: any\n  ) => void,\n  answer: any\n) {\n  throw new Error(\"Function not implemented.\");\n}\n"]},"metadata":{},"sourceType":"module"}