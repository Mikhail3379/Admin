{"ast":null,"code":"var _jsxFileName = \"/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/Auth/EditUser/EditUser.tsx\";\nimport * as React from \"react\";\nimport axios from \"axios\";\nimport { updateUser } from \"../../../lib/endpoints\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class editUser extends React.Component {\n  constructor(props) {\n    super(props); // this.state = { id, public_key };\n\n    this.editUser = (id, public_key) => {\n      axios.put(`${`http://localhost:9000/app/updateUser`}?id=${id}`, {\n        public_key\n      }).then(function (data) {\n        // handle success\n        console.log({\n          Users: data.data\n        });\n        return data.data;\n      });\n    };\n\n    this.updateUser = (id, public_key) => {\n      axios.put(`${updateUser}?id=${id}`, {\n        public_key\n      }).then(function (response) {\n        // handle success\n        console.log({\n          Users: response.data\n        });\n        return response.data;\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      userId: this.props.match.params.id\n    }); // axios.get(`${getUserByID}?id=${id}`).then((response) => {\n    //   // handle success\n    //   console.log({ Users: response.data });\n    //   return response.data;\n    // });\n  }\n\n  render() {\n    // const id = this.state.id;\n    return (\n      /*#__PURE__*/\n      //\n      _jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"Edit User's ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: editUser.id // onChange={(e) => setId(e.target.value)}\n          ,\n          type: \"text\" // placeholder=\"Please enter user's ID\"\n          ,\n          className: \"input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"Edit User's public key\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: editUser.public_key // onChange={(e) => setPublic_key(e.target.value)}\n          ,\n          type: \"text\",\n          className: \"input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn1\" //@ts-ignore\n          ,\n          onClick: updateUser,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n}\neditUser.id = void 0;\neditUser.public_key = void 0;","map":{"version":3,"sources":["/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/Auth/EditUser/EditUser.tsx"],"names":["React","axios","updateUser","editUser","Component","constructor","props","id","public_key","put","then","data","console","log","Users","response","componentDidMount","setState","userId","match","params","render"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAAsBC,UAAtB,QAAwC,wBAAxC;;AAOA,eAAe,MAAMC,QAAN,SAAuBH,KAAK,CAACI,SAA7B,CAAoD;AAGjEC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN,EADsB,CAEtB;;AAFsB,SAIxBH,QAJwB,GAIb,CAACI,EAAD,EAAUC,UAAV,KAA8B;AACvCP,MAAAA,KAAK,CACFQ,GADH,CACQ,GAAG,sCAAsC,OAAMF,EAAG,EAD1D,EAC6D;AACzDC,QAAAA;AADyD,OAD7D,EAIGE,IAJH,CAIQ,UAASC,IAAT,EAAe;AACnB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY;AAAEC,UAAAA,KAAK,EAAEH,IAAI,CAACA;AAAd,SAAZ;AACA,eAAOA,IAAI,CAACA,IAAZ;AACD,OARH;AASD,KAduB;;AAAA,SAgBxBT,UAhBwB,GAgBX,CAACK,EAAD,EAAUC,UAAV,KAA8B;AACzCP,MAAAA,KAAK,CACFQ,GADH,CACQ,GAAEP,UAAW,OAAMK,EAAG,EAD9B,EACiC;AAC7BC,QAAAA;AAD6B,OADjC,EAIGE,IAJH,CAIQ,UAASK,QAAT,EAAmB;AACvB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY;AAAEC,UAAAA,KAAK,EAAEC,QAAQ,CAACJ;AAAlB,SAAZ;AACA,eAAOI,QAAQ,CAACJ,IAAhB;AACD,OARH;AASD,KA1BuB;AAGvB;;AAwBDK,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,CAAc;AAAEC,MAAAA,MAAM,EAAE,KAAKZ,KAAL,CAAWa,KAAX,CAAiBC,MAAjB,CAAwBb;AAAlC,KAAd,EADkB,CAElB;AACA;AACA;AACA;AACA;AACD;;AACMc,EAAAA,MAAM,GAAG;AACd;AACA;AAAA;AACE;AACA;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCAEE;AAAO,UAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA;AAAA;AAAA;AAAA,gBAHF,eAKE;AACE,UAAA,KAAK,EAAElB,QAAQ,CAACI,EADlB,CAEE;AAFF;AAGE,UAAA,IAAI,EAAC,MAHP,CAIE;AAJF;AAKE,UAAA,SAAS,EAAC;AALZ;AAAA;AAAA;AAAA;AAAA,gBALF,eAaE;AAAA;AAAA;AAAA;AAAA,gBAbF,eAcE;AAAO,UAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdF,eAeE;AAAA;AAAA;AAAA;AAAA,gBAfF,eAgBE;AACE,UAAA,KAAK,EAAEJ,QAAQ,CAACK,UADlB,CAEE;AAFF;AAIE,UAAA,IAAI,EAAC,MAJP;AAKE,UAAA,SAAS,EAAC;AALZ;AAAA;AAAA;AAAA;AAAA,gBAhBF,eAwBE;AAAA;AAAA;AAAA;AAAA,gBAxBF,eAyBE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,SAAS,EAAC,MAFZ,CAGE;AAHF;AAIE,UAAA,OAAO,EAAEN,UAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAqCD;;AA7EgE;AAA9CC,Q,CACZI,E;AADYJ,Q,CAEZK,U","sourcesContent":["import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Users from \"../../Users/Users\";\nimport { getUserByID, updateUser } from \"../../../lib/endpoints\";\n\ninterface IState {\n  id: any;\n  public_key: any;\n}\n\nexport default class editUser extends React.Component<any, IState> {\n  static id: string | number | readonly string[] | undefined;\n  static public_key: string | number | readonly string[] | undefined;\n  constructor(props: any) {\n    super(props);\n    // this.state = { id, public_key };\n  }\n  editUser = (id: any, public_key: any) => {\n    axios\n      .put(`${`http://localhost:9000/app/updateUser`}?id=${id}`, {\n        public_key,\n      })\n      .then(function(data) {\n        // handle success\n        console.log({ Users: data.data });\n        return data.data;\n      });\n  };\n\n  updateUser = (id: any, public_key: any) => {\n    axios\n      .put(`${updateUser}?id=${id}`, {\n        public_key,\n      })\n      .then(function(response) {\n        // handle success\n        console.log({ Users: response.data });\n        return response.data;\n      });\n  };\n  componentDidMount() {\n    this.setState({ userId: this.props.match.params.id });\n    // axios.get(`${getUserByID}?id=${id}`).then((response) => {\n    //   // handle success\n    //   console.log({ Users: response.data });\n    //   return response.data;\n    // });\n  }\n  public render() {\n    // const id = this.state.id;\n    return (\n      //\n      <div className=\"container\">\n        {/* <form onSubmit={submitForm}> */}\n        <label className=\"label\">Edit User's ID</label>\n        <br />\n\n        <input\n          value={editUser.id}\n          // onChange={(e) => setId(e.target.value)}\n          type=\"text\"\n          // placeholder=\"Please enter user's ID\"\n          className=\"input\"\n        />\n\n        <br />\n        <label className=\"label\">Edit User's public key</label>\n        <br />\n        <input\n          value={editUser.public_key}\n          // onChange={(e) => setPublic_key(e.target.value)}\n\n          type=\"text\"\n          className=\"input\"\n        />\n\n        <br />\n        <button\n          type=\"submit\"\n          className=\"btn1\"\n          //@ts-ignore\n          onClick={updateUser}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}