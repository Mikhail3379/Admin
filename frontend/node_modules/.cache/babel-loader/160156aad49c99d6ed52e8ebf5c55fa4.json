{"ast":null,"code":"var _jsxFileName = \"/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/QAList/QAList.tsx\";\nimport * as React from \"react\";\nimport \"./QAList.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass QAList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.processFormSubmission = async e => {\n      e.preventDefault(); // updateQA(id, question, answer);\n\n      this.setState({\n        loading: true\n      }); //       const formData = {\n      //           id: this.state.id,\n      //           question: this.state.question,\n      //           answer: this.state.answer,\n      //       }\n      //       this.setState({ submitSuccess: true, values: [...this.state.values, formData], loading: false });\n      //       axios.get(`http://localhost:9000/app/allQA`).then(data => [\n      //           setTimeout(() => {\n      //               this.props.history.push('/');\n      //           }, 1500)\n      //       ]);\n      //   }\n\n      axios.patch(`http://localhost:9000/app/updateQA`, this.state.values).then(data => {\n        this.setState({\n          submitSuccess: true,\n          loading: false\n        });\n        setTimeout(() => {\n          this.props.history.push('/');\n        }, 1500);\n      });\n    };\n\n    this.setValues = values => {\n      this.setState({\n        values: { ...this.state.values,\n          ...values\n        }\n      });\n    };\n\n    this.handleInputChanges = e => {\n      e.preventDefault();\n      this.setValues({\n        [e.currentTarget.id]: e.currentTarget.value\n      });\n    };\n\n    this.state = {\n      id: \"\",\n      question: {},\n      answer: {},\n      values: [],\n      loading: false,\n      submitSuccess: false\n    };\n  }\n\n  componentDidMount() {\n    //getALLQA();\n    axios.get(`http://localhost:9000/app/allQA`).then(response => {\n      // console.log(\"response \"+JSON.stringify(response))\n      console.log(\"data \" + response.data);\n      this.setValues(response.data);\n    });\n  }\n\n  render() {\n    const {\n      submitSuccess,\n      loading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"table table-bordered\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              className: \"thead-light\",\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  scope: \"col\",\n                  children: \"Question\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  scope: \"col\",\n                  children: \"Answer\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: this.state.values && this.state.values.map(question => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: question\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 23\n                }, this)\n              }, question, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          type: \"submit\",\n          children: [\"Edit QA\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n{\n  /* <div className=\"form-group col-md-4 pull-right\">\n   <button className=\"btn\" type=\"submit\">\n     Edit QA{\" \"}\n   </button>\n   {loading && (\n     <span className=\"fa fa-circle-o-notch fa-spin\" />\n   )}\n  </div>\n  </form>\n  </div>\n  // </div>\n  //   </div>\n  )}\n  </div>\n  );\n  }\n  }  */\n}\nexport default QAList;\n\nfunction id(id, question, answer) {\n  throw new Error(\"Function not implemented.\");\n}\n\nfunction question(id, question, answer) {\n  throw new Error(\"Function not implemented.\");\n}\n\nfunction answer(id, question, answer) {\n  throw new Error(\"Function not implemented.\");\n}","map":{"version":3,"sources":["/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/QAList/QAList.tsx"],"names":["React","axios","QAList","Component","constructor","props","processFormSubmission","e","preventDefault","setState","loading","patch","state","values","then","data","submitSuccess","setTimeout","history","push","setValues","handleInputChanges","currentTarget","id","value","question","answer","componentDidMount","get","response","console","log","render","map","Error"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport \"./QAList.css\";\nimport axios from \"axios\";\nimport { getQAById, updateQA } from \"../../lib/axios\";\nimport { getALLQA } from \"../../lib/axios\";\nimport { responseInterceptor } from \"http-proxy-middleware\";\nimport { Link } from \"react-router-dom\";\nimport { deleteQA } from \"../../lib/endpoints\";\nimport { table } from \"console\";\n\nexport interface IValues {\n  [key: string]: any;\n}\nexport interface IFormState {\n  id: string;\n  question: any;\n  answer: any;\n  values: IValues[];\n  submitSuccess: boolean;\n  loading: boolean;\n}\n\nclass QAList extends React.Component<any, any, IFormState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      id: \"\",\n      question: {},\n      answer: {},\n      values: [],\n      loading: false,\n      submitSuccess: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    //getALLQA();\n    axios.get(`http://localhost:9000/app/allQA`).then((response) => {\n       // console.log(\"response \"+JSON.stringify(response))\n        console.log(\"data \"+response.data)\n      this.setValues(response.data);\n    });\n  }\n\n  private processFormSubmission = async (\n    e: React.FormEvent<HTMLFormElement>\n  ): Promise<void> => {\n    e.preventDefault();\n\n    // updateQA(id, question, answer);\n    this.setState({ loading: true });\n    \n    //       const formData = {\n    //           id: this.state.id,\n    //           question: this.state.question,\n    //           answer: this.state.answer,\n              \n    //       }\n    //       this.setState({ submitSuccess: true, values: [...this.state.values, formData], loading: false });\n    //       axios.get(`http://localhost:9000/app/allQA`).then(data => [\n    //           setTimeout(() => {\n    //               this.props.history.push('/');\n    //           }, 1500)\n    //       ]);\n    //   }\n    axios.patch(`http://localhost:9000/app/updateQA`, this.state.values).then(data => {\n            this.setState({ submitSuccess: true, loading: false })\n            setTimeout(() => {\n                this.props.history.push('/');\n            }, 1500)\n        })\n    }\n//     axios.get(`http://localhost:9000/app/allQA`).then((response) => {\n//         this.setState({ submitSuccess: true, loading: false })\n//         setTimeout(() => {\n//             this.props.history.push('/');\n//         }, 1500)\n//     })\n//   };\n\n  private setValues = (values: IValues) => {\n    this.setState({ values: { ...this.state.values, ...values } });\n  };\n  private handleInputChanges = (e: React.FormEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    this.setValues({ [e.currentTarget.id]: e.currentTarget.value });\n  };\n\n  public render() {\n    const { submitSuccess, loading } = this.state;\n    return (\n      <div className=\"App\">\n        {/* {this.state.data && ( */}\n\n        \n\n       <div className=\"container\"> \n          <div className=\"row\">\n            <table className=\"table table-bordered\">\n              <thead className=\"thead-light\">\n                <tr>\n                  <th scope=\"col\">Question</th>\n                  <th scope=\"col\">Answer</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.values &&\n                  this.state.values.map((question:any) => (\n                    <tr key={question}>\n                      <td>{question}</td>\n                    </tr>  \n                  ))} \n              </tbody>         \n            </table>\n          </div>\n          \n          <button className=\"btn\" type=\"submit\">\n                      Edit QA{\" \"}\n                     </button>\n\n        </div>\n       \n      </div>\n    )\n                }\n                }\n\n\n\n                  {/* <div className=\"form-group col-md-4 pull-right\">\n                    <button className=\"btn\" type=\"submit\">\n                      Edit QA{\" \"}\n                    </button>\n                    {loading && (\n                      <span className=\"fa fa-circle-o-notch fa-spin\" />\n                    )}\n                  </div>\n                </form>\n              </div>\n            // </div>\n        //   </div>\n        )}\n      </div>\n    );\n  }\n}  */}\n\nexport default QAList;\nfunction id(id: any, question: any, answer: any) {\n  throw new Error(\"Function not implemented.\");\n}\n\nfunction question(\n  id: (id: any, question: any, answer: any) => void,\n  question: any,\n  answer: any\n) {\n  throw new Error(\"Function not implemented.\");\n}\n\nfunction answer(\n  id: (id: any, question: any, answer: any) => void,\n  question: (\n    id: (id: any, question: any, answer: any) => void,\n    question: any,\n    answer: any\n  ) => void,\n  answer: any\n) {\n  throw new Error(\"Function not implemented.\");\n}\n"]},"metadata":{},"sourceType":"module"}