[{"/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/index.tsx":"1","/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/reportWebVitals.ts":"2","/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/App.tsx":"3","/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/Auth/AddUser/AddUser.tsx":"4","/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/QAList/QAList.tsx":"5","/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/lib/axios.ts":"6","/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/lib/endpoints.ts":"7","/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/Auth/EditUser/EditUser.tsx":"8","/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/Users/Users.tsx":"9","/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/AddQA/AddQA.tsx":"10","/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/EditQA/EditQA.tsx":"11"},{"size":674,"mtime":1638438477587,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1638193401409,"results":"14","hashOfConfig":"13"},{"size":2052,"mtime":1643221121961,"results":"15","hashOfConfig":"13"},{"size":1473,"mtime":1643237190034,"results":"16","hashOfConfig":"13"},{"size":3495,"mtime":1643238286197,"results":"17","hashOfConfig":"13"},{"size":4378,"mtime":1640256401120,"results":"18","hashOfConfig":"13"},{"size":380,"mtime":1640015467168,"results":"19","hashOfConfig":"13"},{"size":2723,"mtime":1643195006407,"results":"20","hashOfConfig":"13"},{"size":3531,"mtime":1643235143200,"results":"21","hashOfConfig":"13"},{"size":1851,"mtime":1640263303449,"results":"22","hashOfConfig":"13"},{"size":2930,"mtime":1643267746841,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1bavvgv",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},"/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/index.tsx",[],["50","51"],"/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/reportWebVitals.ts",[],"/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/App.tsx",[],"/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/Auth/AddUser/AddUser.tsx",[],"/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/QAList/QAList.tsx",["52","53"],"import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport Swal from \"sweetalert2\";\n\ninterface IState {\n  qa: any[];\n}\n\nexport default class QA extends React.Component<any, IState> {\n  constructor(props: any) {\n    super(props);\n    this.state = { qa: [] };\n  }\n  public componentDidMount(): void {\n    axios.get(`http://localhost:9000/app/allQA`).then((data) => {\n      this.setState({ qa: data.data });\n    });\n  }\n\n  deleteQA = (id: any) => {\n    let self = this;\n    Swal.fire({\n      title: \"Are you sure you want to delete this ?\",\n      // showDenyButton: true,\n      showCancelButton: true,\n      confirmButtonText: \"Delete\",\n      // denyButtonText: `Don't save`,\n    }).then((result) => {\n      /* Read more about isConfirmed, isDenied below */\n      if (result.isConfirmed) {\n        axios\n          .delete(`${`http://localhost:9000/app/deleteQA`}?id=${id}`)\n          .then(function(data) {\n            const newUsers = self.state.qa.filter(\n              (queAns: any) => queAns.id != id\n            );\n            // self.setState({ qa: newQa });\n            Swal.fire({\n              icon: \"success\",\n              title: \"Successfully deleted\",\n              showConfirmButton: false,\n              timer: 1500,\n            });\n          })\n          .catch((error) => {\n            Swal.fire({\n              icon: \"error\",\n              title: \"An error occured while deleting this\",\n              showConfirmButton: false,\n              timer: 1500,\n            });\n          });\n      }\n    });\n  };\n  public render() {\n    const qa = this.state.qa;\n    return (\n      <div>\n        {qa.length === 0 && (\n          <div className=\"text-center\">\n            <h2>No data found at the moment</h2>\n          </div>\n        )}\n        <div className=\"container\">\n          <div className=\"row\">\n            <table className=\"table table-bordered\">\n              <thead className=\"thead-light\">\n                <tr>\n                  <th scope=\"col\">Chatbot Question</th>\n                  <th scope=\"col\">Chatbot Answer</th>\n                </tr>\n              </thead>\n              <tbody>\n                {qa &&\n                  qa.map((queAns) => (\n                    <tr key={queAns.id}>\n                      <td>{queAns.question}</td>\n                      <td>{queAns.answer}</td>\n\n                      <td>\n                        <div className=\"d-flex justify-content-between align-items-center\">\n                          <div\n                            className=\"btn-group\"\n                            style={{ marginBottom: \"20px\" }}\n                          >\n                            <Link\n                              to={`editQA/${queAns.id}`}\n                              className=\"btn btn-sm btn-outline-secondary\"\n                            >\n                              Edit QA{\" \"}\n                            </Link>\n                            <button\n                              className=\"btn btn-sm btn-outline-secondary\"\n                              //@ts-ignore\n                              onClick={() => this.deleteQA(queAns.id)}\n                            >\n                              Delete QA\n                            </button>\n                          </div>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/lib/axios.ts",[],"/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/lib/endpoints.ts",[],"/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/Auth/EditUser/EditUser.tsx",["54","55"],"import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Users from \"../../Users/Users\";\nimport { getUserByID, updateUser } from \"../../../lib/endpoints\";\n\ninterface IState {\n  // id: any;\n  // public_key: any;\n  userId: string;\n  userData: any;\n}\n\nexport default class editUser extends React.Component<any, IState> {\n  static id: string | number | readonly string[] | undefined;\n  static public_key: string | number | readonly string[] | undefined;\n  constructor(props: any) {\n    super(props);\n    this.state = { userId: \"\", userData: {} };\n  }\n  // editUser = (id: any, public_key: any) => {\n  //   axios\n  //     .put(`${`http://localhost:9000/app/updateUser`}?id=${id}`, {\n  //       public_key,\n  //     })\n  //     .then(function(data) {\n  //       // handle success\n  //       console.log({ Users: data.data });\n  //       return data.data;\n  //     });\n  // };\n\n  handleUpdateUser = () => {\n    const { id, public_key } = this.state.userData;\n    axios\n      .put(`${updateUser}?id=${id}`, {\n        public_key,\n      })\n      .then(function(response) {\n        // handle success\n        console.log({ Users: response.data });\n        return response.data;\n      });\n  };\n  componentDidMount() {\n    const userId = this.props.match.params.id;\n    this.setState({ userId });\n    axios.get(`${getUserByID}?id=${userId}`).then((response) => {\n      this.setState({ userData: response.data[0] });\n    });\n  }\n  handlePublicKeyChange = (event: any) => {\n    const value = event.target.value;\n    const user = { ...this.state.userData };\n    user.public_key = value;\n    this.setState({ userData: user });\n  };\n  public render() {\n    // const id = this.state.id;\n    const { userData } = this.state;\n    return (\n      //\n      <div className=\"container\">\n        {/* <form onSubmit={submitForm}> */}\n        {/* <label className=\"label\">Edit User's ID</label>\n        <br />\n\n        <input\n          value={userData.id}\n          // onChange={(e) => setId(e.target.value)}\n          type=\"text\"\n          // placeholder=\"Please enter user's ID\"\n          className=\"input\"\n          onChange={this.handleIdChange}\n        /> */}\n\n        <br />\n        <label className=\"label\">Edit User's public key</label>\n        <br />\n        <input\n          value={userData.public_key}\n          // onChange={(e) => setPublic_key(e.target.value)}\n\n          type=\"text\"\n          className=\"input\"\n          onChange={this.handlePublicKeyChange}\n        />\n\n        <br />\n        <button\n          type=\"submit\"\n          className=\"btn1\"\n          //@ts-ignore\n          onClick={this.handleUpdateUser}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n}\n","/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/Users/Users.tsx",[],"/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/AddQA/AddQA.tsx",[],"/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/EditQA/EditQA.tsx",["56","57"],"import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport QA from \"../QAList/QAList\";\nimport {getQAByID , updateQA} from \"../../lib/endpoints\";\n\ninterface IState {\n  // id: any;\n  // public_key: any;\n  queAnsId: string;\n  queAnsData: any;\n}\n\nexport default class editQA extends React.Component<any, IState> {\n  static question: string | number | readonly string[] | undefined;\n  static answer: string | number | readonly string[] | undefined;\n  constructor(props: any) {\n    super(props);\n    this.state = { queAnsId: \"\", queAnsData: {} };\n  }\n  // editUser = (id: any, public_key: any) => {\n  //   axios\n  //     .put(`${`http://localhost:9000/app/updateUser`}?id=${id}`, {\n  //       public_key,\n  //     })\n  //     .then(function(data) {\n  //       // handle success\n  //       console.log({ Users: data.data });\n  //       return data.data;\n  //     });\n  // };\n\n  handleUpdateQA = () => {\n    const {id, question, answer} = this.state.queAnsData;\n    axios\n      .put(`${updateQA}?id=${id}`, {\n        question,\n        answer\n      })\n      .then(function(response) {\n        // handle success\n        console.log({ QA: response.data });\n        return response.data;\n      });\n  };\n  componentDidMount() {\n    const queAnsId = this.props.match.params.id;\n    this.setState({ queAnsId });\n    axios.get(`${getQAByID}?id=${queAnsId}`).then((response) => {\n      this.setState({ queAnsData: response.data[0] });\n    });\n  }\n  handleQChange = (event: any) => {\n    const value = event.target.value;\n    const queAns = { ...this.state.queAnsData };\n    queAns.question = value;\n    this.setState({ queAnsData: queAns });\n  };\n  handleAChange = (event: any) => {\n    const value = event.target.value;\n    const queAns = { ...this.state.queAnsData };\n    queAns.answer = value;\n    this.setState({ queAnsData: queAns });\n  };\n  public render() {\n    // const id = this.state.id;\n    const { queAnsData } = this.state;\n    return (\n      //\n      <div className=\"container\">\n        {/* <form onSubmit={submitForm}> */} \n         <label className=\"label\">Edit Chatbot Question</label>\n        <br />\n\n        <input\n          value={queAnsData.question}\n          // onChange={(e) => setId(e.target.value)}\n          type=\"text\"\n          // placeholder=\"Please enter user's ID\"\n          className=\"input\"\n          onChange={this.handleQChange}\n        />\n\n        <br />\n        <label className=\"label\">Edit Chatbot Answer</label>\n        <br />\n        <input\n          value={queAnsData.answer}\n          // onChange={(e) => setPublic_key(e.target.value)}\n\n          type=\"text\"\n          className=\"input\"\n          onChange={this.handleAChange}\n        />\n\n        <br />\n        <button\n          type=\"submit\"\n          className=\"btn1\"\n          //@ts-ignore\n          onClick={this.handleUpdateQA}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n}\n",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":36,"column":19,"nodeType":"64","messageId":"65","endLine":36,"endColumn":27},{"ruleId":"66","severity":1,"message":"67","line":37,"column":42,"nodeType":"68","messageId":"69","endLine":37,"endColumn":44},{"ruleId":"62","severity":1,"message":"70","line":2,"column":10,"nodeType":"64","messageId":"65","endLine":2,"endColumn":14},{"ruleId":"62","severity":1,"message":"71","line":4,"column":8,"nodeType":"64","messageId":"65","endLine":4,"endColumn":13},{"ruleId":"62","severity":1,"message":"70","line":2,"column":10,"nodeType":"64","messageId":"65","endLine":2,"endColumn":14},{"ruleId":"62","severity":1,"message":"72","line":4,"column":8,"nodeType":"64","messageId":"65","endLine":4,"endColumn":10},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"@typescript-eslint/no-unused-vars","'newUsers' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Link' is defined but never used.","'Users' is defined but never used.","'QA' is defined but never used.","no-global-assign","no-unsafe-negation"]