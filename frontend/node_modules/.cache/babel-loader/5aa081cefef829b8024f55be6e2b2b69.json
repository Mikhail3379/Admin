{"ast":null,"code":"var _jsxFileName = \"/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/EditQA/EditQA.tsx\";\nimport * as React from \"react\";\nimport axios from \"axios\";\nimport { updateQA } from \"../../lib/endpoints\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class editQA extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleUpdateQA = () => {\n      const {\n        question,\n        answer\n      } = this.state.qaData;\n      axios.put(`${updateQA}?id=${id}`, {\n        question,\n        answer\n      }).then(function (response) {\n        // handle success\n        console.log({\n          Users: response.data\n        });\n        return response.data;\n      });\n    };\n\n    this.handlePublicKeyChange = event => {\n      const value = event.target.value;\n      const user = { ...this.state.userData\n      };\n      user.public_key = value;\n      this.setState({\n        userData: user\n      });\n    };\n\n    this.state = {\n      qaId: \"\",\n      qaData: {}\n    };\n  } // editUser = (id: any, public_key: any) => {\n  //   axios\n  //     .put(`${`http://localhost:9000/app/updateUser`}?id=${id}`, {\n  //       public_key,\n  //     })\n  //     .then(function(data) {\n  //       // handle success\n  //       console.log({ Users: data.data });\n  //       return data.data;\n  //     });\n  // };\n\n\n  componentDidMount() {\n    const userId = this.props.match.params.id;\n    this.setState({\n      queAnsId\n    });\n    axios.get(`${getUserByID}?id=${userId}`).then(response => {\n      this.setState({\n        userData: response.data[0]\n      });\n    });\n  }\n\n  render() {\n    // const id = this.state.id;\n    const {\n      userData\n    } = this.state;\n    return (\n      /*#__PURE__*/\n      //\n      _jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"Edit User's public key\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: userData.public_key // onChange={(e) => setPublic_key(e.target.value)}\n          ,\n          type: \"text\",\n          className: \"input\",\n          onChange: this.handlePublicKeyChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn1\" //@ts-ignore\n          ,\n          onClick: this.handleUpdateUser,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n}\neditQA.question = void 0;\neditQA.answer = void 0;","map":{"version":3,"sources":["/Users/mikhailbakushev/Documents/Projects/Nova_chatbot_backoffice/frontend/src/components/EditQA/EditQA.tsx"],"names":["React","axios","updateQA","editQA","Component","constructor","props","handleUpdateQA","question","answer","state","qaData","put","id","then","response","console","log","Users","data","handlePublicKeyChange","event","value","target","user","userData","public_key","setState","qaId","componentDidMount","userId","match","params","queAnsId","get","getUserByID","render","handleUpdateUser"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAAoBC,QAApB,QAAmC,qBAAnC;;AASA,eAAe,MAAMC,MAAN,SAAqBH,KAAK,CAACI,SAA3B,CAAkD;AAG/DC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,SAgBxBC,cAhBwB,GAgBP,MAAM;AACrB,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAsB,KAAKC,KAAL,CAAWC,MAAvC;AACAV,MAAAA,KAAK,CACFW,GADH,CACQ,GAAEV,QAAS,OAAMW,EAAG,EAD5B,EAC+B;AAC3BL,QAAAA,QAD2B;AAE3BC,QAAAA;AAF2B,OAD/B,EAKGK,IALH,CAKQ,UAASC,QAAT,EAAmB;AACvB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY;AAAEC,UAAAA,KAAK,EAAEH,QAAQ,CAACI;AAAlB,SAAZ;AACA,eAAOJ,QAAQ,CAACI,IAAhB;AACD,OATH;AAUD,KA5BuB;;AAAA,SAoCxBC,qBApCwB,GAoCCC,KAAD,IAAgB;AACtC,YAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B;AACA,YAAME,IAAI,GAAG,EAAE,GAAG,KAAKd,KAAL,CAAWe;AAAhB,OAAb;AACAD,MAAAA,IAAI,CAACE,UAAL,GAAkBJ,KAAlB;AACA,WAAKK,QAAL,CAAc;AAAEF,QAAAA,QAAQ,EAAED;AAAZ,OAAd;AACD,KAzCuB;;AAEtB,SAAKd,KAAL,GAAa;AAAEkB,MAAAA,IAAI,EAAE,EAAR;AAAYjB,MAAAA,MAAM,EAAE;AAApB,KAAb;AACD,GAN8D,CAO/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAeAkB,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,MAAM,GAAG,KAAKxB,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBnB,EAAvC;AACA,SAAKc,QAAL,CAAc;AAAEM,MAAAA;AAAF,KAAd;AACAhC,IAAAA,KAAK,CAACiC,GAAN,CAAW,GAAEC,WAAY,OAAML,MAAO,EAAtC,EAAyChB,IAAzC,CAA+CC,QAAD,IAAc;AAC1D,WAAKY,QAAL,CAAc;AAAEF,QAAAA,QAAQ,EAAEV,QAAQ,CAACI,IAAT,CAAc,CAAd;AAAZ,OAAd;AACD,KAFD;AAGD;;AAOMiB,EAAAA,MAAM,GAAG;AACd;AACA,UAAM;AAAEX,MAAAA;AAAF,QAAe,KAAKf,KAA1B;AACA;AAAA;AACE;AACA;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCAcE;AAAA;AAAA;AAAA;AAAA,gBAdF,eAeE;AAAO,UAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAfF,eAgBE;AAAA;AAAA;AAAA;AAAA,gBAhBF,eAiBE;AACE,UAAA,KAAK,EAAEe,QAAQ,CAACC,UADlB,CAEE;AAFF;AAIE,UAAA,IAAI,EAAC,MAJP;AAKE,UAAA,SAAS,EAAC,OALZ;AAME,UAAA,QAAQ,EAAE,KAAKN;AANjB;AAAA;AAAA;AAAA;AAAA,gBAjBF,eA0BE;AAAA;AAAA;AAAA;AAAA,gBA1BF,eA2BE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,SAAS,EAAC,MAFZ,CAGE;AAHF;AAIE,UAAA,OAAO,EAAE,KAAKiB,gBAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA3BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAuCD;;AAvF8D;AAA5ClC,M,CACZK,Q;AADYL,M,CAEZM,M","sourcesContent":["import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport QA from \"../QAList/QAList\";\nimport {getQAByID , updateQA} from \"../../lib/endpoints\";\n\ninterface IState {\n  // id: any;\n  // public_key: any;\n  qaId: string;\n  qaData: any;\n}\n\nexport default class editQA extends React.Component<any, IState> {\n  static question: string | number | readonly string[] | undefined;\n  static answer: string | number | readonly string[] | undefined;\n  constructor(props: any) {\n    super(props);\n    this.state = { qaId: \"\", qaData: {} };\n  }\n  // editUser = (id: any, public_key: any) => {\n  //   axios\n  //     .put(`${`http://localhost:9000/app/updateUser`}?id=${id}`, {\n  //       public_key,\n  //     })\n  //     .then(function(data) {\n  //       // handle success\n  //       console.log({ Users: data.data });\n  //       return data.data;\n  //     });\n  // };\n\n  handleUpdateQA = () => {\n    const { question, answer} = this.state.qaData;\n    axios\n      .put(`${updateQA}?id=${id}`, {\n        question,\n        answer\n      })\n      .then(function(response) {\n        // handle success\n        console.log({ Users: response.data });\n        return response.data;\n      });\n  };\n  componentDidMount() {\n    const userId = this.props.match.params.id;\n    this.setState({ queAnsId });\n    axios.get(`${getUserByID}?id=${userId}`).then((response) => {\n      this.setState({ userData: response.data[0] });\n    });\n  }\n  handlePublicKeyChange = (event: any) => {\n    const value = event.target.value;\n    const user = { ...this.state.userData };\n    user.public_key = value;\n    this.setState({ userData: user });\n  };\n  public render() {\n    // const id = this.state.id;\n    const { userData } = this.state;\n    return (\n      //\n      <div className=\"container\">\n        {/* <form onSubmit={submitForm}> */}\n        {/* <label className=\"label\">Edit User's ID</label>\n        <br />\n\n        <input\n          value={userData.id}\n          // onChange={(e) => setId(e.target.value)}\n          type=\"text\"\n          // placeholder=\"Please enter user's ID\"\n          className=\"input\"\n          onChange={this.handleIdChange}\n        /> */}\n\n        <br />\n        <label className=\"label\">Edit User's public key</label>\n        <br />\n        <input\n          value={userData.public_key}\n          // onChange={(e) => setPublic_key(e.target.value)}\n\n          type=\"text\"\n          className=\"input\"\n          onChange={this.handlePublicKeyChange}\n        />\n\n        <br />\n        <button\n          type=\"submit\"\n          className=\"btn1\"\n          //@ts-ignore\n          onClick={this.handleUpdateUser}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}